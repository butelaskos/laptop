#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  if [ "$1" = 'brew-cask' ]; then
    brew list -1 | grep -Fqx "brew-cask"
  else
    local name="$(brew_expand_alias "$1")"
    brew list -1 | grep -Fqx "$name"
  fi
}

brew_is_upgradable() {
  local name=$1

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
    rbenv rehash
  fi
}

pip_install_or_update() {
  if pip freeze | cut -d '=' -f 1 | grep "$1" > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    pip install --upgrade "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    pip install "$@"
    rbenv rehash
  fi
}

fancy_echo "Default locale to en_US"

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew_install_or_upgrade 'python'

brew_install_or_upgrade 'zsh'
brew_install_or_upgrade 'cmake'
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'hg'
brew_install_or_upgrade 'postgres'
brew_launchctl_restart 'postgresql'
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'redis'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'qt'
brew_install_or_upgrade 'hub'
brew_install_or_upgrade 'node'

if brew_is_installed "mariadb"; then
  if brew_is_upgradable "mariadb"; then
    fancy_echo "Upgrading mariadb"
    brew upgrade mariadb
    brew_launchctl_restart 'mariadb'
  else
    fancy_echo "Already using the latest version of mariadb. Skipping ..."
  fi
else
  fancy_echo "Installing mariadb"
  brew install mariadb

  unset TMPDIR
  fancy_echo "Installing MySQL Databases"
  mysql_install_db

  brew_launchctl_restart 'mariadb'
fi

brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'ruby-build'

# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash zsh)"' 1

brew_install_or_upgrade 'openssl'
brew unlink openssl && brew link openssl --force
brew_install_or_upgrade 'libyaml'

ruby_version="2.3.0"

eval "$(rbenv init - zsh)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  rbenv install -s "$ruby_version"
  ln -s "$(rbenv root)"/versions/"$ruby_version" "$(rbenv root)"/versions/ruby-"$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"

brew_install_or_upgrade 'vim'

gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

gem_install_or_update 'rails'
gem_install_or_update 'git-up'
gem_install_or_update 'capistrano'
gem_install_or_update 'zeus'

fancy_echo "Setting up bundler for mysql2 right version"
bundle config build.mysql2 --with-mysql-config=$(which mysql_config)

brew_install_or_upgrade 'heroku-toolbelt'

if ! command -v rcup >/dev/null; then
  brew_tap 'thoughtbot/formulae'
  brew_install_or_upgrade 'rcm'
fi

if [ ! -d "$HOME/dotfiles" ]; then
  fancy_echo "Installing dotfiles ..."
  git clone git://github.com/jaisonerick/dotfiles.git "$HOME/dotfiles"
fi

fancy_echo "Updating rc files..."
env RCRC=$HOME/dotfiles/rcrc rcup

if [ ! -d "$HOME/.scm_breeze" ]; then
  git clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze
else
  cd ~/.scm_breeze && git pull origin master
fi

brew_install_or_upgrade 'zsh-completions'
brew_install_or_upgrade 'tree'

brew_tap 'caskroom/cask'
brew_tap 'caskroom/fonts'

brew_install_or_upgrade 'brew-cask'

fancy_echo "Install Fonts..."
brew cask install font-source-code-pro
brew cask install font-lato

fancy_echo "Install Dropbox..."
brew cask install dropbox

fancy_echo "Install iTerm 2..."
brew cask install iterm2

fancy_echo "Install uTorrent..."
brew cask install utorrent

fancy_echo "Install Google Chrome..."
brew cask install google-chrome

fancy_echo "Install spotify..."
brew cask install spotify

fancy_echo "Install Office..."
brew cask install microsoft-office

fancy_echo "Install Skype..."
brew cask install skype

fancy_echo "Install The Unarchiver..."
brew cask install the-unarchiver

fancy_echo "Install gitifier..."
brew cask install gitifier

fancy_echo "Install google hangouts..."
brew cask install google-hangouts

fancy_echo "Remember to install via AppStore: "
fancy_echo "- Paw"
fancy_echo "- Slack"
fancy_echo "- Evernote"

fancy_echo "Setting your mac... You may be requested for your sudo pass"

COMPUTER_NAME="SDrive"
# Set computer name
sudo scutil --set ComputerName "$COMPUTER_NAME"
sudo scutil --set HostName "$COMPUTER_NAME"
sudo scutil --set LocalHostName "$COMPUTER_NAME"
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$COMPUTER_NAME"

# Expanding the save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Set default Finder location to home folder (~/)
defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"

# Use current directory as default search scope in Finder
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Show Path bar in Finder
defaults write com.apple.finder ShowPathbar -bool true

# Show Status bar in Finder
defaults write com.apple.finder ShowStatusBar -bool true

# Avoid creating .DS_Store files on network volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

# Enable the Develop menu and the Web Inspector in Safari
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

# Show the ~/Library folder
chflags nohidden ~/Library

# Enable AirDrop over Ethernet and on unsupported Macs
defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

# Automatically quit printer app once the print jobs complete
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

# Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Add ability to toggle between Light and Dark mode in Yosemite using ctrl+opt+cmd+t?
sudo defaults write /Library/Preferences/.GlobalPreferences.plist _HIEnableThemeSwitchHotKey -bool true

# Disable the sudden motion sensor (it's not useful for SSDs/current MacBooks)
sudo pmset -a sms 0

# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Requiring password immediately after sleep or screen saver begins
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# Set Dock to auto-hide
defaults write com.apple.dock autohide -bool true

# Set touchpad to click on tap
sudo defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool false

# Set dashboard to be overlay
defaults write com.apple.dashboard enabled-state -int 3

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi
