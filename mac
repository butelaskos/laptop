#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  chsh -s "$shell_path"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac


gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

pip_install_or_update() {
  if pip freeze | cut -d '=' -f 1 | grep "$1" > /dev/null; then
    pip install --upgrade "$@"
  else
    pip install "$@"
    rbenv rehash
  fi
}

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "homebrew/science"
tap "caskroom/cask"
tap "caskroom/fonts"

# Unix
brew "ctags"
brew "git"
brew "hg"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "zsh"
brew "cmake"
brew "gpg2"
brew "gpg-agent"
brew "zsh-completions"
brew "tree"

# Heroku
brew "heroku-toolbelt"
brew "parity"

# GitHub
brew "hub"

# Mac
brew "mas"
# mas 'Xcode', id: 497799835
mas 'Disk Cleaner', id: 970246631
mas 'Magnet', id: 441258766
mas 'The Unarchiver', id: 425424353
mas 'Keynote', id: 409183694
mas 'Microsoft Remote Desktop', id: 715768417
mas 'Sip', id: 507257563
mas '1Password', id: 443987910

# Testing
brew "qt@5.5"

# Programming languages
brew "libyaml" # should come after openssl
brew "node"
brew "rbenv"
brew "ruby-build"
brew "yarn"
brew "python"
brew "node"
brew "ansible"
brew "forego"
brew "r"

# Image manipulation
brew "imagemagick"

# Databases
brew "postgres", restart_service: true
brew "mariadb", restart_service: true
brew "redis", restart_service: true
EOF

brew unlink qt@5.5
brew link --force qt@5.5

brew services stop mariadb
mysql_install_db
brew services start mariadb

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
  ln -s "$(rbenv root)"/versions/"$ruby_version" "$(rbenv root)"/versions/ruby-"$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

gem_install_or_update 'rails'
gem_install_or_update 'capistrano'
gem_install_or_update 'zeus'

fancy_echo "Setting up bundler for mysql2 right version"
bundle config build.mysql2 --with-mysql-config=$(which mysql_config)

if [ ! -d "$HOME/dotfiles" ]; then
  fancy_echo "Installing dotfiles ..."
  git clone git://github.com/jaisonerick/dotfiles.git "$HOME/dotfiles"
fi

fancy_echo "Updating rc files..."
env RCRC=$HOME/dotfiles/rcrc rcup

reset -Q

# fancy_echo "Install Fonts..."
brew cask install dropbox
brew cask install font-source-code-pro
brew cask install font-lato
brew cask install iterm2
brew cask install google-chrome
brew cask install google-hangouts
# brew cask install microsoft-office
brew cask install franz
brew cask install paw

fancy_echo "Remember to install via AppStore: "
fancy_echo "- Paw"
fancy_echo "- Slack"
fancy_echo "- Evernote"

fancy_echo "Setting your mac... You may be requested for your sudo pass"

COMPUTER_NAME="Tibet"
# Set computer name
sudo scutil --set ComputerName "$COMPUTER_NAME"
sudo scutil --set HostName "$COMPUTER_NAME"
sudo scutil --set LocalHostName "$COMPUTER_NAME"
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$COMPUTER_NAME"

# Expanding the save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Set default Finder location to home folder (~/)
defaults write com.apple.finder NewWindowTarget -string "PfLo"
defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"

# Use current directory as default search scope in Finder
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Show Path bar in Finder
defaults write com.apple.finder ShowPathbar -bool true

# Show Status bar in Finder
defaults write com.apple.finder ShowStatusBar -bool true

# Avoid creating .DS_Store files on network volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

# Enable the Develop menu and the Web Inspector in Safari
defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
defaults write com.apple.Safari IncludeDevelopMenu -bool true
defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true
defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

# Show the ~/Library folder
chflags nohidden ~/Library

# Enable AirDrop over Ethernet and on unsupported Macs
defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

# Automatically quit printer app once the print jobs complete
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

# Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window
sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

# Add ability to toggle between Light and Dark mode in Yosemite using ctrl+opt+cmd+t?
sudo defaults write /Library/Preferences/.GlobalPreferences.plist _HIEnableThemeSwitchHotKey -bool true

# Disable the sudden motion sensor (it's not useful for SSDs/current MacBooks)
sudo pmset -a sms 0

# Disable auto-correct
defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false

# Requiring password immediately after sleep or screen saver begins
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# Set Dock to auto-hide
defaults write com.apple.dock autohide -bool true

# Set touchpad to click on tap
sudo defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool false

# Set dashboard to be overlay
defaults write com.apple.dashboard enabled-state -int 3

if [ ! -d "$HOME/.scm_breeze" ]; then
  git clone git://github.com/ndbroadbent/scm_breeze.git ~/.scm_breeze
else
  cd ~/.scm_breeze && git pull origin master
fi

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi
